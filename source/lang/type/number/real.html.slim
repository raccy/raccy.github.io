---
title: 実数型
order: 2
head:
  - key: name
    title: 型/クラス
  - key: aliases
    title: 別名
  - key: inheritance
    title: 継承
  - key: signed
    title: 符号
    all: true
  — key: base
    title: 基数
    all: true
  - key: size
    title: サイズ(bit数)
    all: true
  - key: min
    title: 最小表現数
    all: true
  - key: max
    title: 最大表現数
    all: true
  - key: infinity
    title: 無限値
  - key: nan
    title: 非数値
    wrap: false
    all: true
  - key: zero
    name: +0/-0区別
    wrap: false
    all: true
  - key: literal
    title: リテラル
    all: true
  - key: library
    title: ライブラリ
  - key: desc
    title: 説明
    wrap: true
list:
  float:
    _head:
      - key: name
        title: 型/クラス
        type: :string
        wrap: false
      - key: aliases
        title: 別名
        type: :array
        wrap: false
      - key: inheritance
        title: 継承
        type: :array
        wrap: false
      - key: size
        title: サイズ(bit数)
        type: :string
        wrap: false
      - key: min
        title: 最小値
        type: :string
        wrap: false
      - key: max
        title: 最大値
        type: :string
        wrap: false
      - key: nan
        title: 非数値
        type: :string
        wrap: false
      - key: zero
        name: +0/-0区別
        type: bool
        wrap: false
      - key: literal
        title: リテラル
        type: :array
        wrap: false
      - key: library
        title: ライブラリ
        type: :string
        wrap: false
      - key: desc
        title: 説明
        type: :string
        wrap: true
    C:
      - name: float
        size: 未定義、通常は32
      - name: double
        size: 未定義、通常は64
      - name: long double
        size: 未定義、通常は128
    Python:
      - name: decimal
        size: 精度を指定可能
        base: 10
        min: -Infinity
        max: Infinity
        nan: NaN
        zero: false
    Ruby:
      - name: Float
        inheritance: ["Numeric", "Object", "BasicObject"]
        all: 実装の<code>dobule</code>に依存。
        literal:
          - "4.2"
          - "4.2e42"
          - "4.2e+42"
          - "4.2e-42"
          - "-4.2"
        desc:
          - 実装は<code>double</code>を使用しているため、そのまま<code>double</code>の範囲に依存します。
          - CRubyでは、<code>sizeof(void *) >= sizeof(dobule)</code>の環境でのみFlonumという特殊な形式で実装される場合があります。内部で2bit分削ったビット列を<code>VALUE</code>にそのまま保存することで、この2bit分を含まない範囲の浮動小数点数については<code>dobule</code>としてそのまま扱うことができ、処理を高速化しています。範囲外になる場合は自動的に通常のFloatになります。プログラマーからは(オブジェクトのIDがいつも同じになること以外に)Floatと区別はできません。
  rational:
    Ruby:
      - name: Rational
        size: 多倍長
        desc: 分子と分母はInteger(FixNumとBigNum)として保存しているため、メモリが許す限りどんな大きな値も処理できます。計算結果が有理数にならないときは自動的にFloatになります。

---
h2 概要
p 数の概念には0.1や1/2(2分の1)といった整数では表せないものがあります。ほとんどの場合は小数や分数で表現できますが、円周率やネイピア数、√2といった無理数を表すことはできません。コンピュータではメモリは有限のため、精度を決めて、結果を丸める必要が出てきます。そこで問題となるのは、どのよう形式で値をメモリに保存し、どこまで精度を持たせるかになります。
p 大きく分けると実装は小数点数型と有理数型に分かれます。通常の小数点数型は小数部と指数部についてそれぞれメモリで保存する領域決め、計算する方法です。指数部によって小数点の位置が変わるため浮動小数点数と呼ばれます。浮動小数点数で表現できる大きさは指数部に依存し、精度は小数部に依存します。
p コンピュータは2進数のほうが計算しやすいため、基数が2の場合がほとんどです。しかし、その方法では単純な小数の足し算ですら、精度の問題で丸め込みが発生するため、別途基数を10にした10進数で計算する型が用意されている場合があります。また、小数点数以下の精度が定まっている計算を想定して、小数点数以下の精度を固定する型もあります。特に通貨計算のために、10を基数として小数点数以下は固定した型(通貨型とも呼ばれます)を用意している言語もあります。
p 有理数型は少し特殊です。数学の分数と同じように、分子と分母を別々に保存しています。有理数型を使用する利点は、計算結果が有理数となる演算では精度が全く落ちないと言うことです。実際の数は全て分数表記できますので、最も正確に演算できます。
p 最後に無理数型ですが、有限なメモリ空間では表現不可能なため、存在しません。ただし、精度を引数で渡すと、その精度での円周率やネイピア数を返すという関数が用意されている場合があります。ある意味無理数型と言ってもいいのでは無いかと思います。
h2 実数型の一覧
h3 浮動小数点数の一覧
== lang_table(current_page.data.head, current_page.data.list["float"])
h3 固定小数点数の一覧
== lang_table(current_page.data.head, current_page.data.list["fixed"])
h3 有理数型の一覧
== lang_table(current_page.data.head, current_page.data.list["rational"])
h3 無理数型の一覧
p 存在しません。
h2 計算速度
p ほとんどの実装で、浮動小数点数はIEEE 754の2進数(基数2)を採用しています。現在あるほとんどのCPUはIEEE 754についてコア部分とは別に演算ユニットを持ち、高速に計算することができます。10進数(基数10)の実装であるIEEE 854もIEEE 754に吸収され、同じくCPUには専用の算ユニットがあります。速度については2進数と10進数どちらが速いかは資料を見つけられなかったため、わかりませんでした。通貨計算などの、10進数での表記が重要になる場合を除き、一般の計算には2進数の浮動小数点数を使用しているようです。
p 有理数型の計算は遅く、多くのメモリが必要になります。速度を期待してはいけません。
